#region VEXcode Generated Robot Configuration
from vex import *
import urandom


# Brain should be defined by default
brain=Brain()


# Robot configuration code




# wait for rotation sensor to fully initialize
wait(30, MSEC)




# Make random actually random
def initializeRandomSeed():
   wait(100, MSEC)
   random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()
   urandom.seed(int(random))
    
# Set random seed
initializeRandomSeed()




def play_vexcode_sound(sound_name):
   # Helper to make playing sounds from the V5 in VEXcode easier and
   # keeps the code cleaner by making it clear what is happening.
   print("VEXPlaySound:" + sound_name)
   wait(5, MSEC)


# add a small delay to make sure we don't print in the middle of the REPL header
wait(200, MSEC)
# clear the console to make sure we don't have the REPL in the console
print("\033[2J")


#endregion VEXcode Generated Robot Configuration


#endregion VEXcode Generated Robot Configuration
# ---------------------------------------------------------------------------- #
#                                                                              #
#   Module:       main.py                                                      #
#   Author:       Aryan                                                        #
#   Created:      11/21/2024, 12:22:13 PM                                       #
#   Description:  V5 project                                                   #
#                                                                              #
# ---------------------------------------------------------------------------- #


# Library imports
from vex import *


brain = Brain()


limit_down = Limit(brain.three_wire_port.h)


clamp = DigitalOut(brain.three_wire_port.a)


belt = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)


Stage1 = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)


lift = Motor(Ports.PORT7, GearSetting.RATIO_18_1, True)


rotation_belt = rotation_8.position(TURNS)


doinker = DigitalOut(brain.three_wire_port.d)


ring_sensor = distance_15.object_distance(MM)


#stops belt and intake
def stopDurAuto():
   left_motor_1.stop()
   left_motor_2.stop()
   left_motor_3.stop()
   right_motor_1.stop()
   right_motor_2.stop()
   right_motor_3.stop()


def intake_spin():
   Stage1.set_velocity(100, PERCENT)
   Stage1.spin(FORWARD)
   belt.set_velocity(100, PERCENT)
   belt.spin(FORWARD)
def intake_reverse():
   Stage1.set_velocity(100)
   Stage1.spin(REVERSE)
   belt.set_velocity(100)
   belt.spin(REVERSE)
def intake_stop():
   Stage1.stop()
   belt.stop()






# Define motors for the drivetrain
left_motor_1 = Motor(Ports.PORT1, GearSetting.RATIO_36_1, False)  # Adjust port and reversal as needed
left_motor_2 = Motor(Ports.PORT2, GearSetting.RATIO_36_1, False)
left_motor_3 = Motor(Ports.PORT3, GearSetting.RATIO_36_1, True)


right_motor_1 = Motor(Ports.PORT4, GearSetting.RATIO_36_1, True)  # Adjust port and reversal as needed
right_motor_2 = Motor(Ports.PORT5, GearSetting.RATIO_36_1, False)
right_motor_3 = Motor(Ports.PORT6, GearSetting.RATIO_36_1, True)


# Define the controller
controller = Controller(ControllerType.PRIMARY)


def pid_control(target_position, kp, ki, kd):
   error = 0
   integral = 0
   derivative = 0
   last_error = 0
   tolerance = 2  # Allowable range for the position to be considered "close enough"
   max_output = 50  # Maximum motor speed (percentage)
  
   while True:
       current_position = rotation_9.position(DEGREES)
       error = target_position - current_position
      
       # Accumulate the integral term if error is small enough
       if abs(error) < 50:  # Prevent integral windup
           integral += error
       else:
           integral = 0  # Reset integral for large errors
      
       derivative = error - last_error
       output = (kp * error) + (ki * integral) + (kd * derivative)
      
       # Clamp output to prevent excessive speed
       output = max(min(output, max_output), -max_output)
      
       # Apply motor velocity and direction
       if output > 0:
           lift.set_velocity(output, PERCENT)
           lift.spin(FORWARD)
       elif output < 0:
           lift.set_velocity(abs(output), PERCENT)
           lift.spin(REVERSE)
       else:
           lift.stop()
      
       # Stop PID loop when within tolerance
       if abs(error) <= tolerance:
           lift.stop()
           break
      
       last_error = error
       wait(20, MSEC)




def turn_90(direction):


   wait(0.5,SECONDS)


   if direction == 'left':
       left_motor_1.spin(REVERSE, 80, PERCENT)
       left_motor_2.spin(REVERSE, 80, PERCENT)
       left_motor_3.spin(REVERSE, 80, PERCENT)
 
       right_motor_1.spin(FORWARD, 50, PERCENT)
       right_motor_2.spin(FORWARD, 50, PERCENT)
       right_motor_3.spin(FORWARD, 50, PERCENT)




   if direction == 'right':
       left_motor_1.spin(FORWARD, 50, PERCENT)
       left_motor_2.spin(FORWARD, 50, PERCENT)
       left_motor_3.spin(FORWARD, 50, PERCENT)
 
       right_motor_1.spin(REVERSE, 80, PERCENT)
       right_motor_2.spin(REVERSE, 80, PERCENT)
       right_motor_3.spin(REVERSE, 80, PERCENT)


   wait(0.305, SECONDS)


   stopDurAuto()


def autonomous():
  clamp.set(False)
  brain.screen.clear_screen()
  brain.screen.print("Autonomous Mode")


  # Drive forward for 2 seconds
  left_motor_1.spin(FORWARD, 50, PERCENT)
  left_motor_2.spin(FORWARD, 50, PERCENT)
  left_motor_3.spin(FORWARD, 50, PERCENT)
   right_motor_1.spin(FORWARD, 50, PERCENT)
  right_motor_2.spin(FORWARD, 50, PERCENT)
  right_motor_3.spin(FORWARD, 50, PERCENT)
   wait(1, SECONDS)  # Wait for 2 seconds while motors run
   # Stop all motors
  left_motor_1.stop()
  left_motor_2.stop()
  left_motor_3.stop()
  right_motor_1.stop()
  right_motor_2.stop()
  right_motor_3.stop()


   # Clamp onto the Mobile Goal


  clamp.set(True)




  wait(1, SECONDS)
  Stage1.set_velocity(100, PERCENT)
  belt.set_velocity(100, PERCENT)
  Stage1.spin(FORWARD)
  belt.spin(FORWARD)




  wait(1, SECONDS)


   # Turn negative 40 degrees to align to the stack of goals
  left_motor_1.spin(FORWARD, 80, PERCENT)
  left_motor_2.spin(FORWARD, 80, PERCENT)
  left_motor_3.spin(FORWARD, 80, PERCENT)
 
  right_motor_1.spin(REVERSE, 50, PERCENT)
  right_motor_2.spin(REVERSE, 50, PERCENT)
  right_motor_3.spin(REVERSE, 50, PERCENT)




  wait(0.2, SECONDS)




  stopDurAuto()
    # run into the stack to score the bottom ring


  left_motor_1.spin(REVERSE, 50, PERCENT)
  left_motor_2.spin(REVERSE, 50, PERCENT)
  left_motor_3.spin(REVERSE, 50, PERCENT)
   right_motor_1.spin(REVERSE, 50, PERCENT)
  right_motor_2.spin(REVERSE, 50, PERCENT)
  right_motor_3.spin(REVERSE, 50, PERCENT)
 
  wait(0.75, SECONDS)


  turn_90('left')


  stopDurAuto()


  left_motor_1.spin(REVERSE, 50, PERCENT)
  left_motor_2.spin(REVERSE, 50, PERCENT)
  left_motor_3.spin(REVERSE, 50, PERCENT)
   right_motor_1.spin(REVERSE, 50, PERCENT)
  right_motor_2.spin(REVERSE, 50, PERCENT)
  right_motor_3.spin(REVERSE, 50, PERCENT)


 
  turn_90('right')




  # Operate the clamp (open or close)


 
    # Example: Close the clamp
    # Wait for 1 second


  left_motor_1.spin(FORWARD, 50, PERCENT)
  left_motor_2.spin(FORWARD, 50, PERCENT)
  left_motor_3.spin(FORWARD, 50, PERCENT)
   right_motor_1.spin(REVERSE, 80, PERCENT)
  right_motor_2.spin(REVERSE, 80, PERCENT)
  right_motor_3.spin(REVERSE, 80, PERCENT)
   wait(0.4, SECONDS)  # Wait for 2 seconds while motors run
  
  stopDurAuto()


  left_motor_1.spin(REVERSE, 50, PERCENT)
  left_motor_2.spin(REVERSE, 50, PERCENT)
  left_motor_3.spin(REVERSE, 50, PERCENT)
   right_motor_1.spin(REVERSE, 50, PERCENT)
  right_motor_2.spin(REVERSE, 50, PERCENT)
  right_motor_3.spin(REVERSE, 50, PERCENT)
   wait(0.4, SECONDS)  # Wait for 2 seconds while motors run


  stopDurAuto()


def user_control():
   brain.screen.clear_screen()
   brain.screen.print("driver control")
   # Place driver control in this while loop


   while True:
       clamp_down = True
       Doinker = False
       # Get joystick values from the left stick
       forward = -controller.axis3.position()  # Inverted forward/backward
       turn = -controller.axis4.position()     # Inverted left/right
      
       # Calculate motor speeds
       left_speed = forward + turn
       right_speed = forward - turn


       # Set motor speeds for the left side
       left_motor_1.spin(DirectionType.FORWARD, left_speed, VelocityUnits.PERCENT)
       left_motor_2.spin(DirectionType.FORWARD, left_speed, VelocityUnits.PERCENT)
       left_motor_3.spin(DirectionType.FORWARD, left_speed, VelocityUnits.PERCENT)


       # Set motor speeds for the right side
       right_motor_1.spin(DirectionType.FORWARD, right_speed, VelocityUnits.PERCENT)
       right_motor_2.spin(DirectionType.FORWARD, right_speed, VelocityUnits.PERCENT)
       right_motor_3.spin(DirectionType.FORWARD, right_speed, VelocityUnits.PERCENT)


       if(controller.buttonA.pressing()):
           clamp_down = False


       if(controller.buttonR2.pressing()):
           intake_spin()


       if(controller.buttonX.pressing()):
           intake_reverse()
       if(controller.buttonY.pressing()):
           intake_stop()


       if(controller.buttonL1.pressing()):
           lift.set_velocity(100, PERCENT)
           lift.spin_for(FORWARD, 30, DEGREES, wait=False)
           lift.set_stopping(HOLD)


       if(controller.buttonR1.pressing()):
           lift.set_velocity(100, PERCENT)
           lift.spin_for(REVERSE, 30, DEGREES, wait=False)
           lift.set_stopping(HOLD)


       clamp.set(clamp_down)


      
      


       if(controller.buttonUp.pressing()):
           Stage1.set_velocity(25, PERCENT)
           x = 0.5
           pid_control(88, x, 0.01, 0.1)
           lift.set_stopping(HOLD)
          
       if(controller.buttonLeft.pressing()):
           Stage1.stop()
           pid_control(195, 0.5, 0.01, 0.1)
           lift.set_stopping(HOLD)


       if(controller.buttonL2.pressing()):
           x = 0.5
           pid_control(69, x, 0.01, 0.1)
           lift.set_stopping(COAST)
      
       if(controller.buttonRight.pressing()):
           doinker.set(True)
       elif(controller.buttonDown.pressing()):
           doinker.set(False)


       # Small delay to avoid CPU overload
       wait(20, MSEC)


# Create competition instance
comp = Competition(user_control, autonomous)


# Actions to do when the program starts
brain.screen.clear_screen()


# Create competition instance
comp = Competition(user_control, autonomous)


# Actions to do when the program starts
brain.screen.clear_screen()



